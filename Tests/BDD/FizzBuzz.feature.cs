// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.5.0.0
//      SpecFlow Generator Version:3.5.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AddressBook.Tests.BDD
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("FizzBuzz")]
    public partial class FizzBuzzFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "FizzBuzz.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD", "FizzBuzz", "\tIn order to avoid silly mistakes\r\n\tAs a developer, I want to test\r\n\tthe behaviou" +
                    "r of my FizzBuzz application", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sending input numbers to FizzBuzz method")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void SendingInputNumbersToFizzBuzzMethod()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending input numbers to FizzBuzz method", null, tagsOfScenario, argumentsOfScenario);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Input"});
                table1.AddRow(new string[] {
                            "1"});
                table1.AddRow(new string[] {
                            "2"});
                table1.AddRow(new string[] {
                            "3"});
                table1.AddRow(new string[] {
                            "4"});
                table1.AddRow(new string[] {
                            "5"});
                table1.AddRow(new string[] {
                            "6"});
                table1.AddRow(new string[] {
                            "7"});
                table1.AddRow(new string[] {
                            "8"});
                table1.AddRow(new string[] {
                            "9"});
                table1.AddRow(new string[] {
                            "10"});
                table1.AddRow(new string[] {
                            "11"});
                table1.AddRow(new string[] {
                            "12"});
                table1.AddRow(new string[] {
                            "13"});
                table1.AddRow(new string[] {
                            "14"});
                table1.AddRow(new string[] {
                            "15"});
                table1.AddRow(new string[] {
                            "16"});
#line 8
 testRunner.Given("input values as follows", ((string)(null)), table1, "Given ");
#line hidden
#line 26
 testRunner.When("Sending input values to FizzBuzz application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result"});
                table2.AddRow(new string[] {
                            "1"});
                table2.AddRow(new string[] {
                            "2"});
                table2.AddRow(new string[] {
                            "Fizz"});
                table2.AddRow(new string[] {
                            "4"});
                table2.AddRow(new string[] {
                            "Buzz"});
                table2.AddRow(new string[] {
                            "Fizz"});
                table2.AddRow(new string[] {
                            "7"});
                table2.AddRow(new string[] {
                            "8"});
                table2.AddRow(new string[] {
                            "Fizz"});
                table2.AddRow(new string[] {
                            "Buzz"});
                table2.AddRow(new string[] {
                            "11"});
                table2.AddRow(new string[] {
                            "Fizz"});
                table2.AddRow(new string[] {
                            "13"});
                table2.AddRow(new string[] {
                            "14"});
                table2.AddRow(new string[] {
                            "Fizz Buzz"});
                table2.AddRow(new string[] {
                            "16"});
#line 27
 testRunner.Then("the result should be as follows", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
